package com.lime.account.controller;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.hssf.util.HSSFColor.HSSFColorPredefined;
import org.apache.poi.ss.usermodel.BorderStyle;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.FillPatternType;
import org.apache.poi.ss.usermodel.HorizontalAlignment;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.servlet.ModelAndView;
import org.springframework.web.servlet.view.json.MappingJackson2JsonView;

import com.lime.account.service.AccountService;
import com.lime.common.service.CommonService;
import com.lime.util.CommUtils;

import egovframework.rte.psl.dataaccess.util.EgovMap;


@Controller
public class AccountController {


	@Resource(name = "jsonView")
	private MappingJackson2JsonView jsonView;

	@Resource(name="accountService")
	private AccountService accountService;

	@Resource(name="commonService")
	private CommonService commonService;

	/**
	 *
	 * @param searchVO - 조회할 정보가 담긴 SampleDefaultVO
	 * @param model
	 * @return "egovSampleList"
	 * @exception Exception
	 */
	//accountList페이지
	@RequestMapping(value = "/account/accountList.do")
	public String selectSampleList(HttpServletRequest request,ModelMap model) throws Exception {
		Map<String, Object> inOutMap  = CommUtils.getFormParam(request);
		System.out.println("accountListController.inOutMap"+inOutMap);
		List<EgovMap> resultMap= commonService.accountList(inOutMap);
		System.out.println("accountListController.resultMap"+resultMap);
		int accountSeq=Integer.parseInt(String.valueOf((resultMap.get(0).get("accountSeq"))));
		model.put("accountSeq", accountSeq);
		model.put("accountList", resultMap);
		return "/account/accountList";
	}

	//엑셀 다운로드
	@RequestMapping(value="/account/excelDown.do")
	public void excelDown(HttpServletRequest request,HttpServletResponse response)throws Exception{
		Map<String, Object> inOutMap  = CommUtils.getFormParam(request);

	/*	Map<String, Object> resultMap = new HashMap<>();
		resultMap.put("profitCost", inOutMap.get("profitCost"));
		resultMap.put("bigGroup",inOutMap.get("bigGroup"));
		resultMap.put("middleGroup",inOutMap.get("middleGroup"));
		resultMap.put("smallGroup",inOutMap.get("smallGroup"));
		resultMap.put("detailGroup",inOutMap.get("detailGroup"));
		resultMap.put("transactionMoney",inOutMap.get("transactionMoney"));
		resultMap.put("transactionDate",inOutMap.get("transactionDate"));
		resultMap.put("comment",inOutMap.get("comment"));*/
	//게시판 목록 조회
		List<EgovMap> list= commonService.accountList(inOutMap);

	//워크북 생성
		Workbook wb = new HSSFWorkbook();
		Sheet sheet = wb.createSheet("게시판");
		Row row = null;
		Cell cell = null;
		int rowNo = 0;

		// 테이블 헤더용 스타일
	    CellStyle headStyle = wb.createCellStyle();

	    // 가는 경계선을 가집니다.
	    headStyle.setBorderTop(BorderStyle.THIN);
	    headStyle.setBorderBottom(BorderStyle.THIN);
	    headStyle.setBorderLeft(BorderStyle.THIN);
	    headStyle.setBorderRight(BorderStyle.THIN);

	    // 배경색은 노란색입니다.
	    headStyle.setFillForegroundColor(HSSFColorPredefined.YELLOW.getIndex());
	    headStyle.setFillPattern(FillPatternType.SOLID_FOREGROUND);

	    // 데이터는 가운데 정렬합니다.
	    headStyle.setAlignment(HorizontalAlignment.CENTER);

	    // 데이터용 경계 스타일 테두리만 지정
	    CellStyle bodyStyle = wb.createCellStyle();
	    bodyStyle.setBorderTop(BorderStyle.THIN);
	    bodyStyle.setBorderBottom(BorderStyle.THIN);
	    bodyStyle.setBorderLeft(BorderStyle.THIN);
	    bodyStyle.setBorderRight(BorderStyle.THIN);

	 // 헤더 생성
	    row = sheet.createRow(rowNo++);
	    cell = row.createCell(0);
	    cell.setCellStyle(headStyle);
	    cell.setCellValue("수익/비용");
	    
	    cell = row.createCell(1);
	    cell.setCellStyle(headStyle);
	    cell.setCellValue("관");
	  
	    cell = row.createCell(2);
	    cell.setCellStyle(headStyle);
	    cell.setCellValue("항");
	    
	    cell = row.createCell(3);
	    cell.setCellStyle(headStyle);
	    cell.setCellValue("목");
	    
	    cell = row.createCell(4);
	    cell.setCellStyle(headStyle);
	    cell.setCellValue("과");
	    
	    cell = row.createCell(5);
	    cell.setCellStyle(headStyle);
	    cell.setCellValue("금액");
	    
	    cell = row.createCell(6);
	    cell.setCellStyle(headStyle);
	    cell.setCellValue("등록일");
	    
	    cell = row.createCell(7);
	    cell.setCellStyle(headStyle);
	    cell.setCellValue("작성자");
	 // 데이터 부분 생성
		/*	Map<String, Object> resultMap = new HashMap<>();
		resultMap.put("profitCost", inOutMap.get("profitCost"));
		resultMap.put("bigGroup",inOutMap.get("bigGroup"));
		resultMap.put("middleGroup",inOutMap.get("middleGroup"));
		resultMap.put("smallGroup",inOutMap.get("smallGroup"));
		resultMap.put("detailGroup",inOutMap.get("detailGroup"));
		resultMap.put("transactionMoney",inOutMap.get("transactionMoney"));
		resultMap.put("transactionDate",inOutMap.get("transactionDate"));
		resultMap.put("comment",inOutMap.get("comment"));*/

	    for( Map<String,Object> resultMap: list) {

	        row = sheet.createRow(rowNo++);

	        cell = row.createCell(0);
	        cell.setCellStyle(bodyStyle);
	        cell.setCellValue(String.valueOf(resultMap.get("profitCost")));

	        cell = row.createCell(1);
	        cell.setCellStyle(bodyStyle);
	        cell.setCellValue(String.valueOf(resultMap.get("bigGroup")));

	        cell = row.createCell(2);
	        cell.setCellStyle(bodyStyle);
	        cell.setCellValue(String.valueOf(resultMap.get("middleGroup")));
	        
	        cell = row.createCell(3);
	        cell.setCellStyle(bodyStyle);
	        cell.setCellValue(String.valueOf(resultMap.get("smallGroup")));
	        
	        cell = row.createCell(4);
	        cell.setCellStyle(bodyStyle);
	        cell.setCellValue(String.valueOf(resultMap.get("detailGroup")));
	        
	        cell = row.createCell(5);
	        cell.setCellStyle(bodyStyle);
	        cell.setCellValue(String.valueOf(resultMap.get("transactionMoney")));
	        
	        cell = row.createCell(6);
	        cell.setCellStyle(bodyStyle);
	        cell.setCellValue(String.valueOf(resultMap.get("transactionDate")));
	        
	        cell = row.createCell(7);
	        cell.setCellStyle(bodyStyle);
	        cell.setCellValue(String.valueOf(resultMap.get("comment")));

	    }
	    // 컨텐츠 타입과 파일명 지정
	    response.setContentType("ms-vnd/excel");
	    response.setHeader("Content-Disposition", "attachment;filename=test.xls");

	    // 엑셀 출력
	    wb.write(response.getOutputStream());
	    wb.close();

	}


	/**
	 *
	 * @param request
	 * @return
	 * @throws Exception
	 */
	//Insert 뷰페이지 + combo박스 list목록 1차
	@RequestMapping(value="/account/accountInsert.do")
	public String accountInsert(HttpServletRequest request, ModelMap model) throws Exception{

		Map<String, Object> inOutMap = new HashMap<>();


		inOutMap.put("category", "A000000");
		List<EgovMap> resultMap= commonService.selectCombo(inOutMap);

		System.out.println("accountInsert.resultMap"+resultMap);
		model.put("resultMap", resultMap);

		return "/account/accountInsert";
	}


	/**
	 *
	 * @param request
	 * @return
	 * @throws Exception
	 */
	//select Combo box
	@RequestMapping(value="/account/selectCombo.do")
	public ModelAndView ajaxtest(HttpServletRequest request) throws Exception{
		System.out.println("/account/selectCombo.do");
		ModelAndView mav = new ModelAndView(jsonView);
		Map<String, Object> inOutMap  = CommUtils.getFormParam(request);

		List<EgovMap> resultMap=commonService.selectCombo(inOutMap);
		mav.addObject("resultMap", resultMap);
		//받는 객체가 없기때문에


		return mav;
	}

	//Insert 보내기 후 수정 페이지 이동
	@RequestMapping(value="/account/accountInsertPro.do")
	public String accountInsertPro(HttpServletRequest request, ModelMap model)throws Exception{

		Map<String, Object> inOutMap  = CommUtils.getFormParam(request);

		commonService.insertBoard(inOutMap);

		List<EgovMap> resultMap = commonService.selectOneAccountBySeq(inOutMap);
		int accountSeq=Integer.parseInt(String.valueOf((resultMap.get(0).get("accountSeq"))));
		inOutMap.put("account_seq", resultMap);

		model.putAll(inOutMap);
		return "redirect:/account/accountUpdate.do?accountSeq="+accountSeq;
	}

	//Update 보내기 후 list페이지로 이동
		@RequestMapping(value="/account/accountUpdatePro.do")
		public String accountUpdatePro(HttpServletRequest request, ModelMap model)throws Exception{
			System.out.println("UPdatePro controller진입");

			Map<String, Object> inOutMap  = CommUtils.getFormParam(request);
			commonService.updateBoard(inOutMap);

			return "redirect:/account/accountList.do";
		}
	//업데이트 뷰페이지
	@RequestMapping(value="/account/accountUpdate.do")
	public String accountUpdate(HttpServletRequest request, Model model) throws Exception{
/*		ModelAndView mav = new ModelAndView(jsonView);*/
		Map<String, Object> inOutMap  = CommUtils.getFormParam(request);
		System.out.println("inOutMap"+inOutMap);
		model.addAttribute("inOutMap",inOutMap);
		Map<String, Object> resultMap = new HashMap<>();

		resultMap.put("category", "A000000");
		List<EgovMap> list1=commonService.selectCombo(resultMap);
		model.addAttribute("list1",list1);

		resultMap.put("category",  inOutMap.get("profitCost"));
		List<EgovMap> list2=commonService.selectCombo(resultMap);
		model.addAttribute("list2",list2);

		resultMap.put("category",  inOutMap.get("bigGroup"));
		List<EgovMap> list3=commonService.selectCombo(resultMap);
		model.addAttribute("list3",list3);


		resultMap.put("category",  inOutMap.get("middleGroup"));
		List<EgovMap> list4=commonService.selectCombo(resultMap);
		model.addAttribute("list4",list4);

		resultMap.put("category",  inOutMap.get("smallGroup"));
		List<EgovMap> list5=commonService.selectCombo(resultMap);
		model.addAttribute("list5",list5);

		model.addAttribute("resultMap", inOutMap.get("profitCost"));
		model.addAttribute("resultMa", inOutMap.get("bigGroup"));
		model.addAttribute("resultM", inOutMap.get("middleGroup"));
		model.addAttribute("result", inOutMap.get("smallGroup"));
		model.addAttribute("resul", inOutMap.get("detailGroup"));
		model.addAttribute("resu", inOutMap.get("transactionMoney"));
		model.addAttribute("res", inOutMap.get("transactionDate"));
		model.addAttribute("re", inOutMap.get("comment"));


		return "/account/accountUpdate";
	}
}// end of calss
	